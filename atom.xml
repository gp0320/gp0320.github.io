<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BLOOK</title>
  <subtitle>GP&#39;s blog and book</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blook.me/"/>
  <updated>2018-03-29T06:42:06.409Z</updated>
  <id>http://blook.me/</id>
  
  <author>
    <name>GP</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机网络相关</title>
    <link href="http://blook.me/2018/03/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/"/>
    <id>http://blook.me/2018/03/29/计算机网络相关/</id>
    <published>2018-03-29T05:03:50.000Z</published>
    <updated>2018-03-29T06:42:06.409Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>计算机通信 是两个运行的进程之间的通信</li>
<li>网络边缘边通信分两种： 1、客户-服务器方式（c/s）(b/s 是一种特例)； 2、对等方式p2p (peer)</li>
<li>OSI： open systems interconnection   开放系统互连基本参考模型   </li>
</ul>
<h3 id="五层协议？"><a href="#五层协议？" class="headerlink" title="五层协议？"></a>五层协议？</h3><img src="/2018/03/29/计算机网络相关/osi.png" alt="五层协议" title="五层协议">
<a id="more"></a>
<blockquote>
<p>注 五层协议的体系结构只为介绍网络原理而设计，实用应用的还是tcp/ip四层体系结构</p>
</blockquote>
<ol>
<li>应用层<br>进程间的协议  数据单元称为报文</li>
<li><p>运输层<br>传输控制协议TCP transmission control protocol  提供面向连接的、可靠的数据传输服务，其数据传输的单位是报文段<br>用户数据报协议 UDP user datagram protocol 提供无连接的，尽最大努力的数据传输服务，不保证数据传输的可靠性，其数据传输的单位是    用户数据报</p>
</li>
<li><p>网络层<br>IP协议  数据分组，2.要选择合适的路由，能够通过网络中的路由器找到目的主机。</p>
</li>
<li><p>数据链路层<br>加上首部和尾部  组装成帧</p>
</li>
<li><p>物理层<br>从首部传开始传 不再加首部</p>
</li>
</ol>
<hr>
<h3 id="TCP-UDP区别"><a href="#TCP-UDP区别" class="headerlink" title="TCP/UDP区别"></a>TCP/UDP区别</h3><ul>
<li><p>UDP<br>在传送数据之前不需要先建立连接. 远地主机的运输层在收到 UDP 报文后, 不要给出任何确认. 虽然 UDP 不提供可靠交付. 但在某些情况下 UDP 却是一种最有效的工方式.</p>
</li>
<li><p>TCP<br>则提供面向连接的服务。在传送数据之前必须先建立连接，数据传送结束后要放连接. TCP 不提供广播或多插服务. 由于 TCP 要提供可靠的、 面向连接的运输眠务,此不可避免地增加了许多的开销，如确认、流量控制、计时器以及连接管理等.这不仅使协议数据单元的首部增大很多.还要占用许多的处理机资源</p>
<img src="/2018/03/29/计算机网络相关/tcp.png" alt="tcp" title="tcp">
</li>
</ul>
<p>socket - (IP 地址： 端口号）<br>每一条TCP连接唯一地被通信两端的两个端点 (即两个套接宇) 所确定.<br>即TCP 连接 ::= {socket1, socket2} = {(IP1: port1), (IP2: port2)}</p>
<h3 id="TCP怎么做到的可靠传输？"><a href="#TCP怎么做到的可靠传输？" class="headerlink" title="TCP怎么做到的可靠传输？"></a>TCP怎么做到的可靠传输？</h3><ol>
<li>停止等待协议  </li>
<li>超时重传</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;计算机通信 是两个运行的进程之间的通信&lt;/li&gt;
&lt;li&gt;网络边缘边通信分两种： 1、客户-服务器方式（c/s）(b/s 是一种特例)； 2、对等方式p2p (peer)&lt;/li&gt;
&lt;li&gt;OSI： open systems interconnection   开放系统互连基本参考模型   &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;五层协议？&quot;&gt;&lt;a href=&quot;#五层协议？&quot; class=&quot;headerlink&quot; title=&quot;五层协议？&quot;&gt;&lt;/a&gt;五层协议？&lt;/h3&gt;&lt;img src=&quot;/2018/03/29/计算机网络相关/osi.png&quot; alt=&quot;五层协议&quot; title=&quot;五层协议&quot;&gt;
    
    </summary>
    
      <category term="osi/TCP" scheme="http://blook.me/categories/osi-TCP/"/>
    
    
  </entry>
  
  <entry>
    <title>css权重计算</title>
    <link href="http://blook.me/2018/03/27/css%E6%9D%83%E9%87%8D%E8%AE%A1%E7%AE%97/"/>
    <id>http://blook.me/2018/03/27/css权重计算/</id>
    <published>2018-03-27T03:28:41.000Z</published>
    <updated>2018-03-27T03:39:22.512Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/03/27/css权重计算/css1.png" alt="css" title="css">
<a id="more"></a>
<h3 id="选择器类型"><a href="#选择器类型" class="headerlink" title="选择器类型"></a>选择器类型</h3><p>　　1、ID　　#id<br>　　2、class　　.class<br>　　3、标签　　p<br>　　4、通用　　*<br>　　5、属性　　[type=”text”]<br>　　6、伪类　　：hover<br>　　7、伪元素　　::first-line<br>　　8、子选择器、相邻选择器</p>
<h3 id="权重计算规则"><a href="#权重计算规则" class="headerlink" title="权重计算规则"></a>权重计算规则</h3><ol>
<li>第一等：代表内联样式，如: style=””，权值为1000。</li>
<li>第二等：代表ID选择器，如：#content，权值为0100。</li>
<li>第三等：代表类，伪类和属性选择器，如.content，权值为0010。</li>
<li>第四等：代表类型选择器和伪元素选择器，如div p，权值为0001。</li>
<li>通配符、子选择器、相邻选择器等的。如*、&gt;、+,权值为0000。</li>
<li>继承的样式没有权值。</li>
</ol>
<img src="/2018/03/27/css权重计算/css-specificity-wars.png" alt="css" title="css">
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">01. *&#123;&#125;                         ====》0</div><div class="line">02. li&#123;&#125;                        ====》1(一个元素)</div><div class="line">03. li:first-line&#123;&#125;             ====》2(一个元素，一个伪元素)</div><div class="line">04. ul li &#123;&#125;                    ====》2（两个元素）</div><div class="line">05. ul ol+li&#123;&#125;                  ====》3（三个元素）</div><div class="line">06. h1+ *[rel=up] &#123;&#125;            ====》11（一个属性选择器，一个元素）</div><div class="line">07. ul ol li.red&#123;&#125;              ====》13（一个类，三个元素）</div><div class="line">08. li.red.level&#123;&#125;              ====》21（两个类，一个元素）</div><div class="line">09. style=&quot;&quot;                    ====》1000(一个行内样式)</div><div class="line">10. p &#123;&#125;                        ====》1（一个元素）</div><div class="line">11. div p &#123;&#125;                    ====》2（两个元素）</div><div class="line">12. .sith &#123;&#125;                    ====》10（一个类）</div><div class="line">13. div p.sith&#123;&#125;                ====》12（一个类，两个元素）</div><div class="line">14. #sith&#123;&#125;                     ====》100（一个ID选择器）</div><div class="line">15. body #darkside .sith p &#123;&#125;   ====》112(1+100+10+1,一个Id选择器，一个类，两个元素)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/03/27/css权重计算/css1.png&quot; alt=&quot;css&quot; title=&quot;css&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>angular实现列表逐条动画指令</title>
    <link href="http://blook.me/2018/03/05/angular%E5%AE%9E%E7%8E%B0%E5%88%97%E8%A1%A8%E9%80%90%E6%9D%A1%E5%8A%A8%E7%94%BB/"/>
    <id>http://blook.me/2018/03/05/angular实现列表逐条动画/</id>
    <published>2018-03-05T02:36:08.000Z</published>
    <updated>2018-03-05T02:50:51.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h1><img src="/2018/03/05/angular实现列表逐条动画/11.gif" alt="title of the picture" title="title of the picture">
<a id="more"></a>
<h1 id="自定义指令代码"><a href="#自定义指令代码" class="headerlink" title="自定义指令代码"></a>自定义指令代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.directive(&apos;reanimate&apos;, ()=&gt;&#123;  // 列表渐进动画</div><div class="line">    return &#123;</div><div class="line">        restrict: &apos;A&apos;,</div><div class="line">        scope: &#123;</div><div class="line">            index: &apos;@&apos;,</div><div class="line">        &#125;,</div><div class="line">        link(scope, element) &#123;</div><div class="line">            element.css(&#123;&apos;transition-delay&apos;:0.05 * scope.index+&apos;s&apos;&#125;)</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h1 id="指令调用"><a href="#指令调用" class="headerlink" title="指令调用"></a>指令调用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tr.slide-right(ng-repeat=&apos;item in vm.saleList&apos; reanimate index=&apos;&#123;&#123;$index&#125;&#125;&apos;)</div></pre></td></tr></table></figure>
<h1 id="slide-right说明"><a href="#slide-right说明" class="headerlink" title="slide-right说明"></a>slide-right说明</h1><blockquote>
<p>  此class来自ng-animation.styl<br>  贴出部分代码</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">   .slide-right</div><div class="line">       easingTimingFunction()</div><div class="line">       &amp;.ng-enter</div><div class="line">           transform(translateX(60px))</div><div class="line">           transitionDuration(250ms)</div><div class="line">           opacity 0</div><div class="line"></div><div class="line"></div><div class="line">&amp;.ng-enter-active</div><div class="line">	transform(translateX(0))</div><div class="line">	opacity 1</div><div class="line"></div><div class="line"></div><div class="line">&amp;.ng-leave</div><div class="line">	transform(translateX(0))</div><div class="line">	transitionDuration(250ms)</div><div class="line">	opacity 1</div><div class="line"></div><div class="line"></div><div class="line">&amp;.ng-leave-active</div><div class="line">	transform(translateX(60px))</div><div class="line">	opacity 0</div><div class="line"></div><div class="line"></div><div class="line">// Hide</div><div class="line">&amp;.ng-hide-add</div><div class="line">	transform(translateX(0))</div><div class="line">	transitionDuration(250ms)</div><div class="line">	opacity:1</div><div class="line"></div><div class="line">&amp;.ng-hide-add.ng-hide-add-active</div><div class="line">	transform(translateX(60px))</div><div class="line">	opacity:0</div><div class="line"></div><div class="line"></div><div class="line">// Show</div><div class="line">&amp;.ng-hide-remove</div><div class="line">	transform(translateX(60px))</div><div class="line">	transitionDuration(250ms)</div><div class="line">	display:block!important</div><div class="line">	opacity:0</div><div class="line"></div><div class="line">&amp;.ng-hide-remove.ng-hide-remove-active</div><div class="line">	transform(translateX(0))</div><div class="line">	opacity:1</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;效果演示&quot;&gt;&lt;a href=&quot;#效果演示&quot; class=&quot;headerlink&quot; title=&quot;效果演示&quot;&gt;&lt;/a&gt;效果演示&lt;/h1&gt;&lt;img src=&quot;/2018/03/05/angular实现列表逐条动画/11.gif&quot; alt=&quot;title of the picture&quot; title=&quot;title of the picture&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网络电视.ts视频格式+ffmpeg用法</title>
    <link href="http://blook.me/2018/03/04/%E7%BD%91%E7%BB%9C%E7%94%B5%E8%A7%86-ts%E8%A7%86%E9%A2%91%E6%A0%BC%E5%BC%8F%E7%BD%91%E9%A1%B5%E6%92%AD%E6%94%BE/"/>
    <id>http://blook.me/2018/03/04/网络电视-ts视频格式网页播放/</id>
    <published>2018-03-04T09:43:41.000Z</published>
    <updated>2018-03-05T09:42:23.501Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>   把本地的文件转成可供浏览器直接播放的视频格式用以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i 文件名 -acodec aac  -vcodec libx264 -r 23 -f mp4 导出文件名</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;   把本地的文件转成可供浏览器直接播放的视频格式用以下代码&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/di
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Daily English</title>
    <link href="http://blook.me/2017/12/14/DailyEnglish/"/>
    <id>http://blook.me/2017/12/14/DailyEnglish/</id>
    <published>2017-12-14T11:10:55.000Z</published>
    <updated>2018-03-29T05:05:23.873Z</updated>
    
    <content type="html"><![CDATA[<p>12.13<br>【Daily English#About shopping】<br> Show window 橱窗<br>Fitting room 试衣间<br>Try on 穿上试试<br>Wrap up 包起来<br>Free of charge 不收费<br>Check out 结帐<br>On hold 预留<br>Refund 退款<br>Invoice 发票<br>Receipt 收据<br>Counter 柜台<br>Small change 零钱<br>Promotion Code 促销码<br>BOGO 买一赠一<br>BOGO 50% OFF 第二件半价<br>Mix and match 混合搭配（以满足获得优惠的条件）<br>Free shipping 包邮<br>Price match 比价<br>Return policy 退货</p>
<a id="more"></a>
<p>【Daily English#Nov. 18th】<br>Today let’s learn something about shopping!  11月28日-11月29日，就是传说中的“黑色星期五 Black Friday”，美国零售市场全年最大促销折扣季的代表日，也就是西方版的双十一。<br>Coupon 优惠券<br>Reservation ticket 预约券<br>Flash sale 限时抢购<br>Final sale 最终销售（不退不换）<br>Clearance 清仓大甩卖<br>In-store only 仅限实体店<br>Out of stock 售罄<br>Value sets 优惠套装<br>Gift with purchase满额送小样<br>Gift Card 礼品卡<br>…To be continued…[机智]</p>
<p>只含一个单词的句子第三波~<br>Gone! —— 跑了！<br>Gorgeous! —— 美极了！<br>Great! —— 太好了！<br>Hey! —— 嘿！<br>Hopefully! —— 希望如此！有希望的话…<br>Horrible! —— 好可怕！<br>Hot! —— 好辣！<br>Hush! —— (肃静)嘘！<br>Hurry! —— 快点！<br>Incredible! —— 不可思议！<br>Indeed? —— 真的？<br>Liar! —— 你撒谎！<br>Listen! —— 听着！<br>Marverllous! —— 棒极了！<br>Now! —— 现在就做！<br>Pardon! —— 请再说一遍！<br>Perfect! —— 很完美！<br>Please! —— 拜托了！<br>Present! —— 到(有)！(用于点名时)<br>Probably! —— 很可能！<br>  Have a nice day</p>
<p>【Aug. 11th】只含一个单词的句子第二波~<br>Cheers! —— 干杯！<br>Congratulations! —— 恭喜啊！<br>Correct! —— 对的！<br>Crazy! —— 疯了！<br>Damn! —— 该死的！<br>Deal! —— 一言为定！<br>Definitely! —— 当然！<br>Disgusting! —— 好恶心呀！<br>Drat! —— 讨厌！<br>Encore! —— 再来一次！<br>Exactly! —— 完全正确！<br>Fantastic! —— 妙极了！<br>Farewell! —— 再见啦！<br>Fifty-fifty! —— 对半分！<br>Foul! —— 犯规了！<br>Fresh! —— 好有型！帅！</p>
<p>最简洁的表达方式：只含一个单词的句子！<br>Absolutely！—— 绝对正确！<br>Adorable! —— 可爱极了！<br>Amazing! —— 太神了！<br>Anytime! —— 随时吩咐！<br>Almost! —— 差不多了！<br>Awful! —— 好可怕呀！<br>After you. —— 您先。<br>About when? —— 大约何时？<br>All set? —— 一切妥当？<br>Allow me! —— 让我来！<br>Behave! —— 放尊重点！<br>Bingo! —— 中了！<br>Boring! —— 真无聊！<br>Bravo! —— 太棒了！<br>Bullshit! —— 胡说！</p>
<p>【July 28th】英文口头禅⚡<br>1.You bet. 一点也没错。<br>2.Kind of. 是有那么一点。<br>3.That’s OK. 不用了。<br>4.Go out on a limb. 冒险。<br>5.Same here. 我也是。</p>
<ol>
<li>It’s still up in the air. 不确定。<br>6.Just checking. 只是随口问问。<br>7.The thing is.重点是。</li>
<li>fix up/hook up 撮合某人。 </li>
</ol>
<p>1.photocopier=复印机<br>2.printer=打印机<br>3.fax=fax machine=传真机<br>4.paper trimmer=裁纸器<br>5.paper shredder=碎纸机<br>Day2<br>1.wastebasket=废纸篓<br>2.notebook=笔记本<br>3.desk calendar=台历<br>4.business card case=名片盒<br>5.envelope=信封<br>Day3<br>1.computer=电脑<br>2.laptop=笔记本电脑<br>3.laptop stand=笔记本电脑支架<br>4.all-in-one desktop=一体机<br>5.monitor=显示器<br>6.computer case=机箱</p>
<p>【July 14th】About marriage💑💑💑<br>propose/pop the question 求婚；<br>matchmaker 红娘；<br>engagement 订婚；<br>fiance 未婚夫； fiancee 未婚妻；<br>bride and bridegroom 新娘和新郎；<br>best man 伴郎； best maid 伴娘；<br>honeymoon 蜜月；<br>我的手机  11:04:49<br>【July 12nd】About marriage💑💑💑<br>propose/pop the question 求婚；<br>matchmaker 红娘；<br>engagement 订婚；<br>fiance 未婚夫； fiancee 未婚妻；<br>bride and bridegroom 新娘和新郎；<br>best man 伴郎； best maid 伴娘；<br>honeymoon 蜜月；<br>divorce 离婚；<br>father-in-law 岳父；mother-in-law 岳母；</p>
<p>【Jun.30th 颜外有意】<br>·yellow 黄色的</p>
<ol>
<li>yellow belly<br>[直译]黄色的肚子<br>[颜外之意]胆小的人；卑怯的人；卑鄙的人。<br>eg.Everybody knows he is a yellow belly,so nobody likes him.<br>大家都知道他是个胆小鬼，所以没人喜欢他。</li>
<li>yellow back<br>[直译]黄色的背<br>[颜外之意]通俗廉价的小说<br>eg.There were a lot of yellow backs in the 19th century.19世纪有许多廉价小说。</li>
<li>yellow alert<br>[直译]黄色的警报<br>[颜外之意]空袭的预备警报<br>eg.People will be frightened if there is a yellow alert.响起空袭的预备警报时人们会感到害怕。</li>
<li>yellow pages<br>[直译]黄色的书页<br>[颜外之意]黄页（分类商业电话号码簿）<br>eg.I see yellow pages every evening.<br>我每晚看分类广告。</li>
</ol>
<p>我的手机  11:05:30<br>【Jun.27rd】颜外有意<br>black 黑色的<br>1．black letter day<br>[直译]黑体印刷的日子（在西方一般喜庆的日子在日历上会用红色标明，普通的日子印的是黑色）<br>[颜外之意]倒霉的一天；不吉利的日子；凶日。<br>eg. Yesterday,a black day,he had a car accident. 昨天他真倒霉，遭遇了车祸。<br>2.in black and white<br>[直译]用白色和黑色<br>[颜外之意]用书面的形式<br>eg.I want this agreement in black and white.我需要这份书面的协定<br>3.a black look<br>[直译]一个黑色的表情<br>[颜外之意]面带怒容；气愤的眼神。<br>eg.Mr. Smith gave his son a black look when he heard his son hadn’t go to school.<br>史密斯先生听闻儿子没去学校，生气的看了他一眼。<br>4.a black coat[直译]一件黑色的外套<br>[颜外之意]职员；领薪阶层(现通称为white collar)<br>eg.Mr.Johnson is a black coat.强生先生是一名公司职员。</p>
<p>我的手机  11:05:57<br>【Daily English# Jun.20th】It’s worth a try! 值得一试！<br>Just wait and see! 等着瞧！<br>Know what I mean? 明白我的意思吧？<br>None of your business! 没你事！<br>So far, so good! 还过得去！<br>Speaking of the devil! 说曹操，曹操到！<br>The walls have ears! 隔墙有耳！<br>We better get going! 最好马上就走！<br>What’s on your mind? 你在想什么？<br>You are the boss! 你是老大！<br>You asked for it! 你自讨苦吃！<br>You have my word! 我保证！<br>我的手机  11:06:09<br>【Daily English*Jun. 16th】Give me a break! 饶了我吧！<br>Great minds think alike! 英雄所见略同！<br>I cross my heart! 我发誓是真的！<br>I just made it! 我做到了！<br>I’ll be right back! 我马上回来！<br>I’ll check it out! 我去查查看！<br>I’ll see to it! 我会留意的！<br>I’m in a hurry! 我赶时间！<br>If I were you…=if I were in your shoes如果我是你。<br>It’s no big deal! 没什么大不了的！</p>
<p>我的手机  11:06:21<br>【Daily English·Jun. 13rd】       Are you kidding me? 跟我开玩笑啊？<br>Back in a moment! 马上回来！<br>Come to the point! 有话直说！<br>Do I have to? 我一定要做吗？<br>Don’t count on me! 别指望我！<br>Don’t get me wrong! 你搞错了！<br>Don’t give me that! 少来这套！<br>Don’t let me down! 别让我失望！<br>Don’t over do it! 别做过头了！<br>Get a move on! 快点吧！</p>
<p>我的手机  11:06:34<br>(碎片时间学英语：共享单车 Jun.9th)</p>
<ol>
<li>单车共享在中国很火爆。<br>Bike-sharing is booming in China.<br>*bike-sharing是一个合成名词，放在主语位置没问题，表示“共享单车”这种现象，booming是一个形容词，表示“兴旺的、繁荣的、大受欢迎的”作表语。</li>
<li>路上好多人都在骑共享单车。<br>Many people are riding shared bikes in the street.<br>*shared bikes指实体的“共享单车”，作为前面动词ride的宾语。</li>
<li>.用智能手机扫共享单车上的二维码解锁。<br>Use your smartphone to scan the QR code on a shared bike to unlock it.</li>
<li>路上好多人都在骑共享单车。<br>Many people are riding shared bikes in the street.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;12.13&lt;br&gt;【Daily English#About shopping】&lt;br&gt; Show window 橱窗&lt;br&gt;Fitting room 试衣间&lt;br&gt;Try on 穿上试试&lt;br&gt;Wrap up 包起来&lt;br&gt;Free of charge 不收费&lt;br&gt;Check out 结帐&lt;br&gt;On hold 预留&lt;br&gt;Refund 退款&lt;br&gt;Invoice 发票&lt;br&gt;Receipt 收据&lt;br&gt;Counter 柜台&lt;br&gt;Small change 零钱&lt;br&gt;Promotion Code 促销码&lt;br&gt;BOGO 买一赠一&lt;br&gt;BOGO 50% OFF 第二件半价&lt;br&gt;Mix and match 混合搭配（以满足获得优惠的条件）&lt;br&gt;Free shipping 包邮&lt;br&gt;Price match 比价&lt;br&gt;Return policy 退货&lt;/p&gt;
    
    </summary>
    
      <category term="英语" scheme="http://blook.me/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="口语" scheme="http://blook.me/tags/%E5%8F%A3%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>tree打印树状目录结构</title>
    <link href="http://blook.me/2017/07/27/tree%E6%89%93%E5%8D%B0%E6%A0%91%E7%8A%B6%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    <id>http://blook.me/2017/07/27/tree打印树状目录结构/</id>
    <published>2017-07-27T03:47:12.000Z</published>
    <updated>2018-03-27T03:59:36.461Z</updated>
    
    <content type="html"><![CDATA[<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tree -I &quot;node_modules|dist|build&quot; -L 3 &gt; tree.md</div><div class="line">tree  &quot;src/&quot;   -L 3 -o  tree.md</div></pre></td></tr></table></figure>
<img src="/2017/07/27/tree打印树状目录结构/tree.png" alt="tree打印树状目录结构" title="tree打印树状目录结构">
<a id="more"></a>
<h4 id="常用配置说明"><a href="#常用配置说明" class="headerlink" title="常用配置说明"></a>常用配置说明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 屏蔽多规则文件:通过|分割，同时加上&quot;&quot;</div><div class="line">-I &quot;node_modules|dist&quot;</div><div class="line"></div><div class="line">// 只是目录</div><div class="line">-d  </div><div class="line"></div><div class="line">//第三方npm包</div><div class="line">node_modules</div><div class="line">//文件类型</div><div class="line">*.html</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;tree -I &amp;quot;node_modules|dist|build&amp;quot; -L 3 &amp;gt; tree.md&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tree  &amp;quot;src/&amp;quot;   -L 3 -o  tree.md&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;/2017/07/27/tree打印树状目录结构/tree.png&quot; alt=&quot;tree打印树状目录结构&quot; title=&quot;tree打印树状目录结构&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue2+vuex+axios+router初次分享</title>
    <link href="http://blook.me/2017/07/24/vue-vuex-axios-router%E5%88%9D%E6%AC%A1%E5%88%86%E4%BA%AB/"/>
    <id>http://blook.me/2017/07/24/vue-vuex-axios-router初次分享/</id>
    <published>2017-07-24T09:11:08.000Z</published>
    <updated>2018-03-04T09:45:05.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置转发"><a href="#配置转发" class="headerlink" title="配置转发"></a>配置转发</h2><ul>
<li>文件路径：config/index.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">port: 4444, // 端口</div><div class="line">proxyTable: &#123;</div><div class="line"></div><div class="line">    &apos;/dev&apos;:&#123;</div><div class="line">      target: &apos;http://dev.api.pdb.com/http/&apos;,</div><div class="line">      pathRewrite: &#123;</div><div class="line">        &apos;^/dev&apos;: &apos;&apos;   // &apos;dev&apos;转换成空字符串</div><div class="line">      &#125;,</div><div class="line">      changeOrigin: true, // 代理转发</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="axios-发送-http"><a href="#axios-发送-http" class="headerlink" title="axios 发送 http"></a>axios 发送 http</h2><ul>
<li>文件路径：main.js</li>
</ul>
<ol>
<li>引用，依赖</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import axios from &apos;axios&apos;</div><div class="line">import VueAxios from &apos;vue-axios&apos;</div><div class="line">Vue.use(VueAxios, axios)</div></pre></td></tr></table></figure>
<ol>
<li><p>全局配置，请求headers</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Vue.axios.defaults.baseURL = &apos;/dev&apos;</div><div class="line">Vue.axios.defaults.headers.common[&apos;X-Auth-Token&apos;] = Vue.localStorage.get(&apos;token&apos;)</div><div class="line">Vue.axios.defaults.headers.common[&apos;X-Auth-Advertiser&apos;] = &apos;-1&apos;</div><div class="line">Vue.axios.defaults.headers.common[&apos;content-type&apos;] = &apos;application/x-www-form-urlencoded; charset=UTF-8&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>全局配置,拦截器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//在发送请求之前做某事</div><div class="line">import Qs from &quot;querystring&quot;</div><div class="line">Vue.axios.interceptors.request.use(config=&gt;&#123;</div><div class="line"></div><div class="line">  config.data = Qs.stringify(config.data)</div><div class="line">  return config;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//在得到响应之后做某事</div><div class="line">Vue.axios.interceptors.response.use(response =&gt;&#123;</div><div class="line">	// 全局判断 code 码为0 直接return 需要使用的数据data</div><div class="line">  if(response.data.ret == 0) &#123;</div><div class="line">    return response.data.data</div><div class="line">  &#125; // 全局判断 code 码为1 跳到登录页</div><div class="line">  else if(response.data.ret == 1) &#123;</div><div class="line"></div><div class="line">     window.location.href = response.data.data.url</div><div class="line">    return Promise.reject(response.data.msg)</div><div class="line">  &#125; else &#123;</div><div class="line">  //  不为0，把 msg, reject 到 error 层</div><div class="line">    return Promise.reject(response.data.msg)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<hr>
<a id="more"></a>
<h2 id="router-路由"><a href="#router-路由" class="headerlink" title="router 路由"></a>router 路由</h2><ul>
<li>文件路径：router/index.js</li>
</ul>
<ol>
<li>引用，依赖</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;</div><div class="line">import Router from &apos;vue-router&apos;</div><div class="line">Vue.use(Router)</div></pre></td></tr></table></figure>
<ol>
<li>全局配置，请求headers<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">import campaign from &apos;./campaign.js&apos;</div><div class="line">import version from &apos;./version.js&apos;</div><div class="line"></div><div class="line">export default new Router(&#123;</div><div class="line"></div><div class="line">// 去掉#号</div><div class="line">  mode: &apos;history&apos;, </div><div class="line">  </div><div class="line">  routes: [</div><div class="line">    // &#123; path: &apos;/&apos;, redirect: &apos;/login&apos; &#125;,</div><div class="line">    // 重定向</div><div class="line">    &#123; path: &apos;/campaign&apos;, redirect: &apos;/campaign/search&apos; &#125;,</div><div class="line"></div><div class="line"></div><div class="line">	 // 登录页</div><div class="line">    &#123;</div><div class="line">      path: &apos;/&apos;,</div><div class="line">      name: &apos;login&apos;,</div><div class="line">      component: Login,</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">	 // layout 功能页</div><div class="line">    &#123;</div><div class="line">      path: &apos;&apos;,</div><div class="line">      abstract: true,</div><div class="line">      component: Layout,</div><div class="line">      // 子路由</div><div class="line">      children: [campaign, version]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="campaign-js"><a href="#campaign-js" class="headerlink" title="campaign.js"></a>campaign.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 懒加载</div><div class="line">const campaignSearch = r =&gt; require.ensure([], () =&gt; r(require(&apos;@/components/campaign/Search.vue&apos;)), )</div><div class="line"></div><div class="line"></div><div class="line">export default &#123;</div><div class="line">  path: &apos;/campaign&apos;,</div><div class="line">  name: &apos;campaign&apos;,</div><div class="line">  component: &#123;template: `&lt;div&gt;&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;`&#125;,</div><div class="line">  children: [</div><div class="line">    &#123;</div><div class="line">      path: &apos;search&apos;,  //   注意子路由前 不加 /</div><div class="line">      name: &apos;search&apos;,</div><div class="line">      component: campaignSearch,</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 字符串 --&gt;</div><div class="line">&lt;router-link to=&quot;home&quot;&gt;Home&lt;/router-link&gt;</div><div class="line">&lt;!-- 渲染结果 --&gt;</div><div class="line">&lt;a href=&quot;home&quot;&gt;Home&lt;/a&gt;</div><div class="line"></div><div class="line">&lt;!-- 使用 v-bind 的 JS 表达式 --&gt;</div><div class="line">&lt;router-link v-bind:to=&quot;&apos;home&apos;&quot;&gt;Home&lt;/router-link&gt;</div><div class="line"></div><div class="line">&lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --&gt;</div><div class="line">&lt;router-link :to=&quot;&apos;home&apos;&quot;&gt;Home&lt;/router-link&gt;</div><div class="line"></div><div class="line">&lt;!-- 同上 --&gt;</div><div class="line">&lt;router-link :to=&quot;&#123; path: &apos;home&apos; &#125;&quot;&gt;Home&lt;/router-link&gt;</div><div class="line"></div><div class="line">&lt;!-- 命名的路由 --&gt;</div><div class="line">&lt;router-link :to=&quot;&#123; name: &apos;user&apos;, params: &#123; userId: 123 &#125;&#125;&quot;&gt;User&lt;/router-link&gt;</div><div class="line"></div><div class="line">&lt;!-- 带查询参数，下面的结果为 /register?plan=private --&gt;</div><div class="line">&lt;router-link :to=&quot;&#123; path: &apos;register&apos;, query: &#123; plan: &apos;private&apos; &#125;&#125;&quot;&gt;Register&lt;/router-link&gt;</div></pre></td></tr></table></figure>
<h3 id="router-link-编程式"><a href="#router-link-编程式" class="headerlink" title="router-link  编程式"></a>router-link  编程式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 字符串</div><div class="line">router.push(&apos;home&apos;)</div><div class="line"></div><div class="line">// 对象</div><div class="line">router.push(&#123; path: &apos;home&apos; &#125;)</div><div class="line"></div><div class="line">// 命名的路由</div><div class="line">router.push(&#123; name: &apos;user&apos;, params: &#123; userId: 123 &#125;&#125;)</div><div class="line"></div><div class="line">// 带查询参数，变成 /register?plan=private</div><div class="line">router.push(&#123; path: &apos;register&apos;, query: &#123; plan: &apos;private&apos; &#125;&#125;)</div></pre></td></tr></table></figure>
<h3 id="路由信息对象的属性"><a href="#路由信息对象的属性" class="headerlink" title="路由信息对象的属性"></a>路由信息对象的属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$route.path</div><div class="line"></div><div class="line">类型: string</div><div class="line"></div><div class="line">字符串，对应当前路由的路径，总是解析为绝对路径，如 &quot;/foo/bar&quot;。</div><div class="line"></div><div class="line">$route.params</div><div class="line"></div><div class="line">类型: Object</div><div class="line">一个 key/value 对象，包含了 动态片段 和 全匹配片段，如果没有路由参数，就是一个空对象。</div><div class="line"></div><div class="line">$route.query</div><div class="line"></div><div class="line">类型: Object</div><div class="line"></div><div class="line">一个 key/value 对象，表示 URL 查询参数。例如，对于路径 /foo?user=1，</div><div class="line">则有 $route.query.user == 1，如果没有查询参数，则是个空对象。</div><div class="line"></div><div class="line">$route.hash</div><div class="line"></div><div class="line">类型: string</div><div class="line"></div><div class="line">当前路由的 hash 值 (带 #) ，如果没有 hash 值，则为空字符串。</div></pre></td></tr></table></figure>
<h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><blockquote>
<p> 使用 jade + styl ，文件内容多 可以采用引入式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;template lang=&quot;jade&quot;&gt;</div><div class="line">  .navigation(id=&quot;nav&quot;)</div><div class="line">    .header-top-bottom</div><div class="line">    ul.first-munu</div><div class="line">      li(v-for=&quot;(item,$index) in menuList&quot; )</div><div class="line">        router-link(v-bind:to=&quot;item.router&quot;  active-class=&quot;active&quot;)</div><div class="line">          span &#123;&#123;item.name&#125;&#125;</div><div class="line"></div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script src=&quot;./header-nav.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;style lang=&quot;styl&quot; src=&quot;./header-nav.styl&quot; scoped&gt;&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scoped  局部样式</div></pre></td></tr></table></figure>
<h3 id="自定义全局组件"><a href="#自定义全局组件" class="headerlink" title="自定义全局组件"></a>自定义全局组件</h3><blockquote>
<p> RmSelect 为例</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import mySelect from &apos;./Select.vue&apos;</div><div class="line">// 这里是重点</div><div class="line">const RmSelect = &#123;</div><div class="line">  install(Vue)&#123;</div><div class="line">    Vue.component(&apos;RmSelect&apos;,mySelect)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">// 导出组件</div><div class="line">export default RmSelect</div><div class="line"></div><div class="line"></div><div class="line">main.js</div><div class="line">// 自定义全局组件</div><div class="line">import RmSelect from &apos;@/components/select&apos;</div><div class="line">Vue.use(RmSelect)</div></pre></td></tr></table></figure>
<h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><ul>
<li>state 数据</li>
<li><p>getter 特别像computed。有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  state: &#123;</div><div class="line">    todos: [</div><div class="line">      &#123; id: 1, text: &apos;...&apos;, done: true &#125;,</div><div class="line">      &#123; id: 2, text: &apos;...&apos;, done: false &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  getters: &#123;</div><div class="line">    doneTodos: state =&gt; &#123;</div><div class="line">      return state.todos.filter(todo =&gt; todo.done)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>Mutations 更改 Vuex 的 store 中的状态的唯一方法</p>
</li>
<li>Action   Action 提交的是 mutation，而不是直接变更状态。在 action 内部执行异步操作.<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  state: &#123;</div><div class="line">    count: 0</div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  mutations: &#123;</div><div class="line">    increment (state) &#123;</div><div class="line">      state.count++</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  actions: &#123;</div><div class="line">    increment (context) &#123;</div><div class="line">      context.commit(&apos;increment&apos;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// Action 通过 store.dispatch 方法触发：</div><div class="line">store.dispatch(&apos;increment&apos;)</div><div class="line"></div><div class="line">// Mutations 通过 store.commit 方法触发：</div><div class="line">store.commit(&apos;increment&apos;)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>1、 组件的 methods 里面的 function, 例：this.$store.dispatch(‘getList’） 发送到 Action<br>2、Action 收到后 进行异步 http 请求，请求完成后 commit(‘getList’,res) 到 mutations<br>3、 mutations 的function 的第一个参数是 state,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mutations = &#123;</div><div class="line">  getList (state, res) &#123;</div><div class="line"></div><div class="line">      state.list = res.list</div><div class="line">      state.status = res.status</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 默认情况下，模块内部的 action、mutation 和 getter 是注册在全局命名空间的</div><div class="line"></div><div class="line">namespaced: true,</div><div class="line"></div><div class="line">// 在 modules 的内部不需要加 命名空间的前缀</div><div class="line">getters[&apos;isAdmin&apos;]</div><div class="line">dispatch(&apos;login&apos;)</div><div class="line">commit(&apos;login&apos;)</div><div class="line"></div><div class="line">// 在外部的组件需要像下面这样使用</div><div class="line">getters[&apos;account/isAdmin&apos;]</div><div class="line">dispatch(&apos;account/login&apos;)</div><div class="line">commit(&apos;account/login&apos;)</div></pre></td></tr></table></figure>
<h4 id="end"><a href="#end" class="headerlink" title="end:"></a>end:</h4><pre><code>mixins 没有讲到,后来知道用法
工作之余学了两周，第一次用vue做东西，实践了几个栏目，当时用的还是很全面。
还看了看vue的源码，监听数据变化的原理
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;配置转发&quot;&gt;&lt;a href=&quot;#配置转发&quot; class=&quot;headerlink&quot; title=&quot;配置转发&quot;&gt;&lt;/a&gt;配置转发&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;文件路径：config/index.js&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;port: 4444, // 端口&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;proxyTable: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;/dev&amp;apos;:&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      target: &amp;apos;http://dev.api.pdb.com/http/&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      pathRewrite: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;apos;^/dev&amp;apos;: &amp;apos;&amp;apos;   // &amp;apos;dev&amp;apos;转换成空字符串&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      changeOrigin: true, // 代理转发&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;axios-发送-http&quot;&gt;&lt;a href=&quot;#axios-发送-http&quot; class=&quot;headerlink&quot; title=&quot;axios 发送 http&quot;&gt;&lt;/a&gt;axios 发送 http&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;文件路径：main.js&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;引用，依赖&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import axios from &amp;apos;axios&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import VueAxios from &amp;apos;vue-axios&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Vue.use(VueAxios, axios)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;全局配置，请求headers&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Vue.axios.defaults.baseURL = &amp;apos;/dev&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Vue.axios.defaults.headers.common[&amp;apos;X-Auth-Token&amp;apos;] = Vue.localStorage.get(&amp;apos;token&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Vue.axios.defaults.headers.common[&amp;apos;X-Auth-Advertiser&amp;apos;] = &amp;apos;-1&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Vue.axios.defaults.headers.common[&amp;apos;content-type&amp;apos;] = &amp;apos;application/x-www-form-urlencoded; charset=UTF-8&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;全局配置,拦截器&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//在发送请求之前做某事&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import Qs from &amp;quot;querystring&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Vue.axios.interceptors.request.use(config=&amp;gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  config.data = Qs.stringify(config.data)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return config;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//在得到响应之后做某事&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Vue.axios.interceptors.response.use(response =&amp;gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	// 全局判断 code 码为0 直接return 需要使用的数据data&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  if(response.data.ret == 0) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return response.data.data&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125; // 全局判断 code 码为1 跳到登录页&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  else if(response.data.ret == 1) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     window.location.href = response.data.data.url&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return Promise.reject(response.data.msg)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125; else &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  //  不为0，把 msg, reject 到 error 层&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return Promise.reject(response.data.msg)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>html2jade用法总结</title>
    <link href="http://blook.me/2017/07/04/html2jade%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://blook.me/2017/07/04/html2jade用法总结/</id>
    <published>2017-07-04T08:18:11.000Z</published>
    <updated>2018-03-04T09:45:05.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g html2jade</div></pre></td></tr></table></figure>
<h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><ul>
<li>-d, –double - 为属性使用双引号</li>
<li>-o, –outdir - 输出生成的文件路径</li>
<li>-n, –nspaces <n> - 缩进生成文件的空格数。默认为2个空格</n></li>
<li>–donotencode - 中文编码</li>
<li>–bodyless -  不包含 html + body 标签</li>
<li>–noattrcomma - 属性之间不要逗号分隔</li>
<li>–noemptypipe - omit lines with only pipe (‘|’) printable character 去掉|</li>
</ul>
<a id="more"></a>    
<h2 id="中文编码"><a href="#中文编码" class="headerlink" title="中文编码"></a>中文编码</h2><blockquote>
<p> 当我们使用 html2jade 转换含有中文的html时，若是在终端中转换只用加个参数 <code>--donotencode</code> 就好了。</p>
</blockquote>
<h2 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">html2jade    ./views/campGroup/campGroup-editor.tmpl.html  --donotencode  </div><div class="line"> --bodyless   --noattrcomma   --noemptypipe   -o  </div><div class="line">    ./src/app/console/campGroup/editor/</div><div class="line">   </div><div class="line">  // 所有html文件 </div><div class="line">  *.html</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install -g html2jade&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参数说明&quot;&gt;&lt;a href=&quot;#参数说明&quot; class=&quot;headerlink&quot; title=&quot;参数说明&quot;&gt;&lt;/a&gt;参数说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;-d, –double - 为属性使用双引号&lt;/li&gt;
&lt;li&gt;-o, –outdir - 输出生成的文件路径&lt;/li&gt;
&lt;li&gt;-n, –nspaces &lt;n&gt; - 缩进生成文件的空格数。默认为2个空格&lt;/li&gt;
&lt;li&gt;–donotencode - 中文编码&lt;/li&gt;
&lt;li&gt;–bodyless -  不包含 html + body 标签&lt;/li&gt;
&lt;li&gt;–noattrcomma - 属性之间不要逗号分隔&lt;/li&gt;
&lt;li&gt;–noemptypipe - omit lines with only pipe (‘|’) printable character 去掉|&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS style</title>
    <link href="http://blook.me/2017/03/14/JS-style/"/>
    <id>http://blook.me/2017/03/14/JS-style/</id>
    <published>2017-03-14T08:26:24.000Z</published>
    <updated>2017-03-14T08:31:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-Style-Guide1-0"><a href="#JavaScript-Style-Guide1-0" class="headerlink" title="JavaScript Style Guide1.0"></a>JavaScript Style Guide1.0</h1><blockquote>
<p>继承自airbnb的规范和angular最佳实践</p>
</blockquote>
<ul>
<li>TM组前端开发流程</li>
<li>工具函数库</li>
<li>ES6</li>
<li>angular最佳实践</li>
<li>常用工具函数和代码片段</li>
<li>js规范</li>
</ul>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><ul>
<li>申请gitlab，RAP账号</li>
<li>dev分支用来开发调试，test分支测试</li>
<li>master分支禁止修改代码，只能从test分支merge</li>
<li>代码符合后面的规范</li>
<li>推进相关接口的RAP文档</li>
</ul>
<hr>
<h2 id="工具函数库"><a href="#工具函数库" class="headerlink" title="工具函数库"></a>工具函数库</h2><ul>
<li>angular-ui-bootstrap 常见组件库</li>
<li>angular-ui-router 路由</li>
<li>echarts 可视化图表</li>
<li>moment 日期处理</li>
<li>lodash 语言增强函数（部分）</li>
</ul>
<p>后续考虑加入其它的 比如<code>rxjs</code>等</p>
<hr>
<h2 id="ES6简介"><a href="#ES6简介" class="headerlink" title="ES6简介"></a>ES6简介</h2><ul>
<li>模块化机制 import</li>
<li>解构赋值</li>
<li>Promise</li>
<li>class语法糖</li>
<li>箭头函数</li>
<li>…arg代替apply和arguments</li>
<li>let const</li>
<li><code>::obj.method ≡ bind</code></li>
<li>模板字符串</li>
</ul>
<hr>
<h2 id="angular1-5使用规范"><a href="#angular1-5使用规范" class="headerlink" title="angular1.5使用规范"></a>angular1.5使用规范</h2><ul>
<li>多用1.5的component，标签式组件都用component</li>
<li>属性增强型组件才选择directive</li>
<li>数据转换统一用filter</li>
<li>多用service，解放controller</li>
<li>ui-router+component，路由即组件</li>
<li>controller,service,directive,filter,component的 写法示例</li>
</ul>
<hr>
<h2 id="angular1-5-ES6最佳时间"><a href="#angular1-5-ES6最佳时间" class="headerlink" title="angular1.5+ES6最佳时间"></a>angular1.5+ES6最佳时间</h2><h6 id="利用语言自己的特性，淡化和angular的耦合"><a href="#利用语言自己的特性，淡化和angular的耦合" class="headerlink" title="利用语言自己的特性，淡化和angular的耦合"></a>利用语言自己的特性，淡化和angular的耦合</h6><ul>
<li>模块机制</li>
<li>service</li>
<li>controller</li>
<li>component</li>
<li>filter</li>
<li>功能复杂拆分的方式</li>
</ul>
<hr>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul>
<li>一个相对完整的功能，对外暴露moduleName方便module之间相互引入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//a.js</div><div class="line">import Factory from &apos;./Factory&apos;</div><div class="line">export angular.module(&quot;app-moduleA&quot;, [])</div><div class="line">    .factory(&quot;FactoryA&quot;, FactoryA)</div><div class="line">    .name;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//b.js</div><div class="line"></div><div class="line">import ModuleA from &apos;./a&apos;</div><div class="line">angular.module(&apos;app-init&apos;,[ModuleA]);</div></pre></td></tr></table></figure>
<hr>
<h2 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// factory</div><div class="line">// a.js</div><div class="line">export default function FactoryA &#123;</div><div class="line">    return &#123;</div><div class="line">        a: 1</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// b.js</div><div class="line">import FactoryA from &apos;./a&apos;</div><div class="line">export angular.module(&quot;moduleA&quot;, [])</div><div class="line">    .factory(&quot;FactoryA&quot;, FactoryA)</div><div class="line">    .name;</div></pre></td></tr></table></figure>
<hr>
<h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">export default class Service &#123;</div><div class="line">    getName() &#123;</div><div class="line">        return &apos;kuitos&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// b.js</div><div class="line">import Service from &apos;./Service&apos;;</div><div class="line"></div><div class="line">export default angular.module(&apos;services&apos;, [])</div><div class="line">    .service(&apos;service&apos;, Service)</div><div class="line">    .name;</div></pre></td></tr></table></figure>
<hr>
<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">export default class ControllerA &#123;</div><div class="line">    constructor($http) &#123;</div><div class="line">    	&apos;ngInject&apos;</div><div class="line">        this.$http = $http</div><div class="line">    &#125;</div><div class="line">    actionA()&#123;</div><div class="line">    	this.$http.get(...)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import ControllerA from &quot;./controllers/a&quot;</div><div class="line"></div><div class="line">export angular.module(&quot;moduleA&quot;, [])</div><div class="line">    .controller(&quot;ControllerA&quot;, ControllerA)</div></pre></td></tr></table></figure>
<hr>
<h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">export default class AppCtrl &#123;</div><div class="line">    constructor() &#123;</div><div class="line">        this.name = &apos;angular&amp;es6&apos;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getName() &#123;</div><div class="line">        return this.name</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h4 id="component-Controller"><a href="#component-Controller" class="headerlink" title="component Controller"></a>component Controller</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import template from &apos;./date-picker.tpl.html&apos;;</div><div class="line">import controller from &apos;./DatePickerCtrl&apos;;</div><div class="line"></div><div class="line">const ddo = &#123;</div><div class="line">    template,</div><div class="line">    controller,</div><div class="line">    bindings: &#123;</div><div class="line">        year: &apos;&lt;&apos;,</div><div class="line">        month: &apos;&lt;&apos;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default angular.module(&apos;components.datePicker&apos;, [])</div><div class="line">    .component(&apos;datePicker&apos;, ddo)</div><div class="line">    .name;</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">export default class DatePickerCtrl &#123;</div><div class="line"></div><div class="line">    $onInit() &#123;</div><div class="line">    	this.year=&apos;2016&apos;</div><div class="line">        this.month=&apos;12&apos;</div><div class="line">        this.date = `$&#123;this.year&#125;-$&#123;this.month&#125;`;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getMonth() &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getYear() &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h4 id="路由即组件"><a href="#路由即组件" class="headerlink" title="路由即组件"></a>路由即组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">export default angular.module(&apos;app.project&apos;, [listComp])</div><div class="line">  .config(($stateProvider, $urlRouterProvider) =&gt; &#123;</div><div class="line">    $stateProvider.state(&apos;project&apos;, &#123;</div><div class="line">      parent: &apos;app&apos;,</div><div class="line">      url: &apos;/project/:folderId&apos;,</div><div class="line">	  // controller和template都在组件内部维护</div><div class="line">	 component: &apos;projectList&apos;</div><div class="line">    &#125;)</div><div class="line">   &#125;)</div><div class="line">   .name</div></pre></td></tr></table></figure>
<hr>
<h4 id="最终目的–淡化框架"><a href="#最终目的–淡化框架" class="headerlink" title="最终目的–淡化框架"></a>最终目的–淡化框架</h4><h4 id="去除冗余，让代码易于维护"><a href="#去除冗余，让代码易于维护" class="headerlink" title="去除冗余，让代码易于维护"></a>去除冗余，让代码易于维护</h4><hr>
<h2 id="常见代码片段"><a href="#常见代码片段" class="headerlink" title="常见代码片段"></a>常见代码片段</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//遍历数组</span></div><div class="line"></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//映射新数组</span></div><div class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">v</span>=&gt;</span>v*<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">// 所有元素是否通过测试</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].every(<span class="function"><span class="params">v</span>=&gt;</span>v&gt;<span class="number">3</span>);</div><div class="line"><span class="comment">//是否有元素通过测试</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].some(<span class="function"><span class="params">v</span>=&gt;</span>v&gt;<span class="number">3</span>);</div><div class="line"><span class="comment">//累加</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].reduce(<span class="function">(<span class="params">pre,cur</span>)=&gt;</span>pre+cur);</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//过滤数组</div><div class="line">[1,2,3,4,5].filter(v=&gt;v&gt;3);</div><div class="line">[1,false,2,3].filter(v=&gt;v);</div><div class="line">//查找符合条件的元素;</div><div class="line">arr = [&#123;name:&apos;dasheng&apos;,age:18&#125;,&#123;name:&apos;rmos&apos;,age:1&#125;];</div><div class="line"></div><div class="line">arr.find(v=&gt;v.age&gt;10);</div><div class="line">// 查找索引</div><div class="line">arr.findIndex(v=&gt;v.age&gt;10);</div><div class="line">// 查找索引</div><div class="line">[1,2,3].indexOf(2);</div><div class="line">// 是否包含</div><div class="line">[1,2,3,4].includes(3);</div><div class="line">//数组字符串拼接</div><div class="line">[&apos;hello&apos;,&apos;world&apos;,&apos;addnewer&apos;].join(&apos;--&apos;);</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 获取对象的key</div><div class="line">Object.keys(&#123;name:&apos;rmos&apos;,age:1&#125;);</div><div class="line"></div><div class="line">// 获取对象里数据的数量</div><div class="line">Object.keys(&#123;name:&apos;rmos&apos;,age:1&#125;).length;</div><div class="line"></div><div class="line">// 遍历数组</div><div class="line"></div><div class="line">Object.entries(&#123;name:&apos;rmos&apos;,age:1&#125;);</div><div class="line">//[[&apos;name&apos;,&apos;rmos&apos;],[&apos;age&apos;,1]];</div><div class="line"></div><div class="line">Object.entries(&#123;name:&apos;rmos&apos;,age:1&#125;).forEach(([k,v])=&gt;&#123;</div><div class="line">	console.log(v);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">for(let o of dict)&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//去除空白</div><div class="line">&apos;  hello world    &apos;.trim();</div><div class="line">// 重复创建字符串</div><div class="line">&apos;hello&apos;.repeat(2);</div><div class="line">// 连接数组</div><div class="line">arr1=[1,2,3];</div><div class="line">arr2 = [4,5,6];</div><div class="line">arr1.concat(arr2);</div><div class="line">[...arr1,...ar2];</div><div class="line">// extend功能</div><div class="line">Object.assign(&#123;name:1,age:2&#125;,&#123;name:3&#125;);</div><div class="line">// 获取列表的头和尾</div><div class="line">const [head, ...tail] = [1, 2, 3];</div><div class="line">const [last, ...initial] = [1, 2, 3].reverse();</div><div class="line"></div><div class="line">// 数组去重</div><div class="line">arr = [1,2,3,4,3,2,1];</div><div class="line">[...new Set(arr)];</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//默认值</div><div class="line">function log(x=1,y=2)&#123;&#125;;</div><div class="line">function log(&#123;x,y=5&#125;);</div><div class="line">// 替代apply的参数</div><div class="line">args = [1,2,3];</div><div class="line">fn.apply(null,args);</div><div class="line">fn(...args);</div><div class="line"></div><div class="line"></div><div class="line">// bind apply ES7的规范，但是babel已经支持</div><div class="line">foo::bar  === bar.bind(foo);</div><div class="line">args = [1,2];</div><div class="line">foo::bar(...args) ===  bar.apply(foo, args);</div><div class="line"></div><div class="line">// ::左边为空</div><div class="line">::obj.foo === obj::obj.foo ;</div></pre></td></tr></table></figure>
<hr>
<h2 id="javascript规范"><a href="#javascript规范" class="headerlink" title="javascript规范"></a>javascript规范</h2><hr>
<ul>
<li><a href="http://eslint.cn/docs/rules/" target="_blank" rel="external">校验工具eslint详细规则</a></li>
<li>强制要求jsdoc格式注释 ，参数和返回值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Add two numbers.</div><div class="line"> * @param &#123;number&#125; num1 The first number.</div><div class="line"> * @param &#123;number&#125; num2 The second number.</div><div class="line"> * @returns &#123;number&#125; The sum of the two numbers.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;string&#125; name Whom to greet.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Hello "</span> + name);</div><div class="line">&#125;</div><div class="line"><span class="comment">// class constructor allows missing @returns tag</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Represents a sum.</div><div class="line"> * @author shengxinjing</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sum</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * @param &#123;number&#125; num1 The first number.</div><div class="line">     * @param &#123;number&#125; num2 The second number.</div><div class="line">     */</div><div class="line">    <span class="keyword">constructor</span>(num1, num2) &#123;</div><div class="line">        <span class="keyword">this</span>.num1 = num1;</div><div class="line">        <span class="keyword">this</span>.num2 = num2;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>全面使用ES6语法</li>
<li>禁止使用<code>eval()</code></li>
<li>使用四个空格缩进</li>
<li>行尾需要加分号<code>;</code>,eslint: <a href="http://eslint.org/docs/rules/semi.html" target="_blank" rel="external"><code>semi</code></a></li>
<li><p>用 <code>const</code> 定义常量;  eslint: <a href="http://eslint.org/docs/rules/prefer-const.html" target="_blank" rel="external"><code>prefer-const</code></a>, <a href="http://eslint.org/docs/rules/no-const-assign.html" target="_blank" rel="external"><code>no-const-assign</code></a></p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>如果对变量重新赋值, 用 <code>let</code> 替代 <code>var</code>. eslint: <a href="http://eslint.org/docs/rules/no-var.html" target="_blank" rel="external"><code>no-var</code></a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  count += <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good, use the let.</span></div><div class="line"><span class="keyword">let</span> count = <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  count += <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul>
<li><p>直接用字面量定义对象. eslint: <a href="http://eslint.org/docs/rules/no-new-object.html" target="_blank" rel="external"><code>no-new-object</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> item = &#123;&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>动态给对象赋值，ES6的计算属性</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getKey</span>(<span class="params">k</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">`a key named <span class="subst">$&#123;k&#125;</span>`</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  <span class="attr">id</span>: <span class="number">5</span>,</div><div class="line">  <span class="attr">name</span>: <span class="string">'San Francisco'</span>,</div><div class="line">&#125;;</div><div class="line">obj[getKey(<span class="string">'enabled'</span>)] = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  <span class="attr">id</span>: <span class="number">5</span>,</div><div class="line">  <span class="attr">name</span>: <span class="string">'San Francisco'</span>,</div><div class="line">  [getKey(<span class="string">'enabled'</span>)]: <span class="literal">true</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>对象方法使用简写. eslint: <a href="http://eslint.org/docs/rules/object-shorthand.html" target="_blank" rel="external"><code>object-shorthand</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> atom = &#123;</div><div class="line">  <span class="attr">value</span>: <span class="number">1</span>,</div><div class="line"></div><div class="line">  <span class="attr">addValue</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> atom = &#123;</div><div class="line">  <span class="attr">value</span>: <span class="number">1</span>,</div><div class="line"></div><div class="line">  addValue(value) &#123;</div><div class="line">    <span class="keyword">return</span> atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>对象属性简写，eslint: <a href="http://eslint.org/docs/rules/object-shorthand.html" target="_blank" rel="external"><code>object-shorthand</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">'Luke Skywalker'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  <span class="attr">lukeSkywalker</span>: lukeSkywalker,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  lukeSkywalker,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>对象简写写在前面</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> anakinSkywalker = <span class="string">'Anakin Skywalker'</span>;</div><div class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">'Luke Skywalker'</span>;</div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  <span class="attr">episodeOne</span>: <span class="number">1</span>,</div><div class="line">  lukeSkywalker,</div><div class="line">  <span class="attr">episodeThree</span>: <span class="number">3</span>,</div><div class="line">  <span class="attr">mayTheFourth</span>: <span class="number">4</span>,</div><div class="line">  anakinSkywalker,</div><div class="line">&#125;;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  lukeSkywalker,</div><div class="line">  anakinSkywalker,</div><div class="line">  <span class="attr">episodeOne</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">episodeThree</span>: <span class="number">3</span>,</div><div class="line">  <span class="attr">mayTheFourth</span>: <span class="number">4</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>合法的key不需要引号. eslint: <a href="http://eslint.org/docs/rules/quote-props.html" target="_blank" rel="external"><code>quote-props</code></a></p>
<blockquote>
<p>易读，并且易于压缩</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> bad = &#123;</div><div class="line">  <span class="string">'foo'</span>: <span class="number">3</span>,</div><div class="line">  <span class="string">'bar'</span>: <span class="number">4</span>,</div><div class="line">  <span class="string">'data-blah'</span>: <span class="number">5</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> good = &#123;</div><div class="line">  <span class="attr">foo</span>: <span class="number">3</span>,</div><div class="line">  <span class="attr">bar</span>: <span class="number">4</span>,</div><div class="line">  <span class="string">'data-blah'</span>: <span class="number">5</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>用 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="external"><code>Object.assign</code></a> 浅拷贝. 用展开符号<code>...</code> 去获取一个新的对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// very bad</span></div><div class="line"><span class="keyword">const</span> original = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</div><div class="line"><span class="keyword">const</span> copy = <span class="built_in">Object</span>.assign(original, &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;); <span class="comment">// this mutates `original` ಠ_ಠ</span></div><div class="line"><span class="keyword">delete</span> copy.a; <span class="comment">// so does this</span></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> original = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</div><div class="line"><span class="keyword">const</span> copy = <span class="built_in">Object</span>.assign(&#123;&#125;, original, &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;); <span class="comment">// copy =&gt; &#123; a: 1, b: 2, c: 3 &#125;</span></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> original = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</div><div class="line"><span class="keyword">const</span> copy = &#123; ...original, <span class="attr">c</span>: <span class="number">3</span> &#125;; <span class="comment">// copy =&gt; &#123; a: 1, b: 2, c: 3 &#125;</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> &#123; a, ...noA &#125; = copy; <span class="comment">// noA =&gt; &#123; b: 2, c: 3 &#125;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul>
<li><p>用字面量创建数组. eslint: <a href="http://eslint.org/docs/rules/no-array-constructor.html" target="_blank" rel="external"><code>no-array-constructor</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> items = [];</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>用 <code>...</code> to 复制数组.</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">// bad</span></div><div class="line">   <span class="keyword">const</span> len = items.length;</div><div class="line">   <span class="keyword">const</span> itemsCopy = [];</div><div class="line">   <span class="keyword">let</span> i;</div><div class="line"></div><div class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i += <span class="number">1</span>) &#123;</div><div class="line">     itemsCopy[i] = items[i];</div><div class="line">   &#125;</div><div class="line"><span class="comment">//bad</span></div><div class="line">   <span class="keyword">const</span> itemsCopy = angular.copy(items)</div><div class="line">   <span class="comment">// good</span></div><div class="line">   <span class="keyword">const</span> itemsCopy = [...items];</div></pre></td></tr></table></figure>
</li>
<li><p>用<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="external">Array.from</a>把类数组转换为数组</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.foo'</span>);</div><div class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>数组的回调函数，都要有return, eslint: <a href="http://eslint.org/docs/rules/array-callback-return" target="_blank" rel="external"><code>array-callback-return</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</div><div class="line">  <span class="keyword">return</span> x * y;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><ul>
<li><p>使用对象解构来获取对象的值</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> firstName = user.firstName;</div><div class="line">  <span class="keyword">const</span> lastName = user.lastName;</div><div class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = user;</div><div class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// best</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>数组解构.  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</div><div class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> [first, second] = arr;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>返回多个值的时候，用对象解构，不要用数组</p>
<blockquote>
<p>因为返回值不需要考虑顺序</p>
</blockquote>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</div><div class="line">  <span class="comment">// then a miracle occurs</span></div><div class="line">  <span class="keyword">return</span> [left, right, top, bottom];</div><div class="line">&#125;</div><div class="line"><span class="comment">// the caller needs to think about the order of return data</span></div><div class="line"><span class="keyword">const</span> [left, __, top] = processInput(input);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</div><div class="line">  <span class="comment">// then a miracle occurs</span></div><div class="line">  <span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</div><div class="line">&#125;</div><div class="line"><span class="comment">// the caller selects only the data they need</span></div><div class="line"><span class="keyword">const</span> &#123; left, top &#125; = processInput(input);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul>
<li><p>简单的字符串用单引号. eslint: <a href="http://eslint.org/docs/rules/quotes.html" target="_blank" rel="external"><code>quotes</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> name = <span class="string">"Capt. Janeway"</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad - template literals should contain interpolation or newlines</span></div><div class="line"><span class="keyword">const</span> name = <span class="string">`Capt. Janeway`</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> name = <span class="string">'Capt. Janeway'</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>使用字符串模板连接字符串,可读性比较好 eslint: <a href="http://eslint.org/docs/rules/prefer-template.html" target="_blank" rel="external"><code>prefer-template</code></a> <a href="http://eslint.org/docs/rules/template-curly-spacing" target="_blank" rel="external"><code>template-curly-spacing</code></a></p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'How are you, '</span> + name + <span class="string">'?'</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [<span class="string">'How are you, '</span>, name, <span class="string">'?'</span>].join();</div><div class="line">&#125;</div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123; name &#125;</span>?`</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123;name&#125;</span>?`</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>禁止没有必要的转义，可读性差. eslint: <a href="http://eslint.org/docs/rules/no-useless-escape" target="_blank" rel="external"><code>no-useless-escape</code></a></p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> foo = <span class="string">'\'this\' \i\s \"quoted\"'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> foo = <span class="string">'\'this\' is "quoted"'</span>;</div><div class="line"><span class="keyword">const</span> foo = <span class="string">`my name is '<span class="subst">$&#123;name&#125;</span>'`</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>不要在if，wihile里定义函数. eslint: <a href="http://eslint.org/docs/rules/no-loop-func.html" target="_blank" rel="external"><code>no-loop-func</code></a></li>
</ul>
<ul>
<li><p><strong>Note:</strong> ECMA-262规定了 <code>block</code> 的语句. <code>block</code>作用域里不要定义函数 <a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97" target="_blank" rel="external">来源</a>.</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (currentUser) &#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Nope.'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">let</span> test;</div><div class="line"><span class="keyword">if</span> (currentUser) &#123;</div><div class="line">  test = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>用<code>...</code>取代<code>arguments</code>. eslint: <a href="http://eslint.org/docs/rules/prefer-rest-params" target="_blank" rel="external"><code>prefer-rest-params</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params">...args</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>用参数默认值来定义默认值</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// really bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">  opts = opts || &#123;&#125;;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// still bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (opts === <span class="keyword">void</span> <span class="number">0</span>) &#123;</div><div class="line">    opts = &#123;&#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>有默认值的参数放后面.</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;, name</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">name, opts = &#123;&#125;</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>函数定义要有空格 eslint: <a href="http://eslint.org/docs/rules/space-before-function-paren" target="_blank" rel="external"><code>space-before-function-paren</code></a> <a href="http://eslint.org/docs/rules/space-before-blocks" target="_blank" rel="external"><code>space-before-blocks</code></a></p>
<blockquote>
<p>可读性</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"><span class="keyword">const</span> g = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"><span class="keyword">const</span> h = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> x = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="keyword">const</span> y = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>调用函数的时候用 <code>...</code> 展开参数数组去 eslint: <a href="http://eslint.org/docs/rules/prefer-spread" target="_blank" rel="external"><code>prefer-spread</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log.apply(<span class="built_in">console</span>, x);</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log(...x);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">new</span> (<span class="built_in">Function</span>.prototype.bind.apply(<span class="built_in">Date</span>, [<span class="literal">null</span>, <span class="number">2016</span>, <span class="number">08</span>, <span class="number">05</span>]));</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(...[<span class="number">2016</span>, <span class="number">08</span>, <span class="number">05</span>]);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ul>
<li><p>多用箭头函数<code>=&gt;</code>（参数，匿名函数…）. eslint: <a href="http://eslint.org/docs/rules/prefer-arrow-callback.html" target="_blank" rel="external"><code>prefer-arrow-callback</code></a>, <a href="http://eslint.org/docs/rules/arrow-spacing.html" target="_blank" rel="external"><code>arrow-spacing</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</div><div class="line">  <span class="keyword">return</span> x * y;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</div><div class="line">  <span class="keyword">return</span> x * y;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>如果函数只有一行，使用箭头函数简写形式，eslint: <a href="http://eslint.org/docs/rules/arrow-parens.html" target="_blank" rel="external"><code>arrow-parens</code></a>, <a href="http://eslint.org/docs/rules/arrow-body-style.html" target="_blank" rel="external"><code>arrow-body-style</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">number</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> nextNumber = number + <span class="number">1</span>;</div><div class="line">  <span class="string">`A string containing the <span class="subst">$&#123;nextNumber&#125;</span>.`</span>;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// good</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">number</span> =&gt;</span> <span class="string">`A string containing the <span class="subst">$&#123;number&#125;</span>.`</span>);</div><div class="line"><span class="comment">// good</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">number, index</span>) =&gt;</span> (&#123;</div><div class="line">  [index]: number</div><div class="line">&#125;));</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>如果箭头函数只有一个参数并且只有一行，不需要括号，否则都需要括号.eslint: <a href="http://eslint.org/docs/rules/arrow-parens.html" target="_blank" rel="external"><code>arrow-parens</code></a></p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> x * x);</div><div class="line"><span class="comment">// good</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</div><div class="line"><span class="comment">// good</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">number</span> =&gt;</span> (</div><div class="line">  <span class="string">`A long string with the <span class="subst">$&#123;number&#125;</span>. It’s so long that we don’t want it to take up space on the .map line!`</span></div><div class="line">));</div><div class="line"><span class="comment">// bad</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</div><div class="line">  <span class="keyword">return</span> x * y;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// good</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</div><div class="line">  <span class="keyword">return</span> x * y;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="Classes-amp-Constructors"><a href="#Classes-amp-Constructors" class="headerlink" title="Classes &amp; Constructors"></a>Classes &amp; Constructors</h2><hr>
<ul>
<li><p>用 <code>class</code>取代 <code>prototype</code></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params">contents = []</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.queue = [...contents];</div><div class="line">&#125;</div><div class="line">Queue.prototype.pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> value = <span class="keyword">this</span>.queue[<span class="number">0</span>];</div><div class="line">  <span class="keyword">return</span> value;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(contents = []) &#123;</div><div class="line">    <span class="keyword">this</span>.queue = [...contents];</div><div class="line">  &#125;</div><div class="line">  pop() &#123;</div><div class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.queue[<span class="number">0</span>];</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>用 <code>extends</code> 来继承</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> inherits = <span class="built_in">require</span>(<span class="string">'inherits'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PeekableQueue</span>(<span class="params">contents</span>) </span>&#123;</div><div class="line">  Queue.apply(<span class="keyword">this</span>, contents);</div><div class="line">&#125;</div><div class="line">inherits(PeekableQueue, Queue);</div><div class="line">PeekableQueue.prototype.peek = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeekableQueue</span> <span class="keyword">extends</span> <span class="title">Queue</span> </span>&#123;</div><div class="line">  peek() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>方法可以返回 <code>this</code>支持链式调用</p>
  <figure class="highlight plain"><figcaption><span>pt</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// good</div><div class="line">class Jedi &#123;</div><div class="line">  jump() &#123;</div><div class="line">    this.jumping = true;</div><div class="line">    return this;</div><div class="line">  &#125;</div><div class="line">  setHeight(height) &#123;</div><div class="line">    this.height = height;</div><div class="line">    return this;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">const luke = new Jedi();</div><div class="line">luke.jump()</div><div class="line">  .setHeight(20);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>去除没有必要的constructor. eslint: <a href="http://eslint.org/docs/rules/no-useless-constructor" target="_blank" rel="external"><code>no-useless-constructor</code></a><br>- <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;&#125;</div><div class="line">  getName() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>避免重复的方法. eslint: <a href="http://eslint.org/docs/rules/no-dupe-class-members" target="_blank" rel="external"><code>no-dupe-class-members</code></a></li>
</ul>
<pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</div><div class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><hr>
<h2 id="模块-1"><a href="#模块-1" class="headerlink" title="模块"></a>模块</h2><hr>
<ul>
<li>不要import <code>*</code>.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">import</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li><p>一个地址只import一次.<br>eslint: <a href="http://eslint.org/docs/rules/no-duplicate-imports" target="_blank" rel="external"><code>no-duplicate-imports</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</div><div class="line"><span class="comment">// … some other imports … //</span></div><div class="line"><span class="keyword">import</span> &#123; named1, named2 &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">import</span> foo, &#123; named1, named2 &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">import</span> foo, &#123;</div><div class="line">  named1,</div><div class="line">  named2,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>export变量，一定要const.防止被外部修改<br>eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-mutable-exports.md" target="_blank" rel="external"><code>import/no-mutable-exports</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> foo = <span class="number">3</span>;</div><div class="line"><span class="keyword">export</span> &#123; foo &#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> foo = <span class="number">3</span>;</div><div class="line"><span class="keyword">export</span> &#123; foo &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>只export一个的话，用default.<br>eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md" target="_blank" rel="external"><code>import/prefer-default-export</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>所有的<code>import</code>写在前面.<br>eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/first.md" target="_blank" rel="external"><code>import/first</code></a></p>
<blockquote>
<p>Why? Since <code>import</code>s are hoisted, keeping them all at the top prevents surprising behavior.</p>
</blockquote>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</div><div class="line">foo.init();</div><div class="line"></div><div class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">'bar'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</div><div class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">'bar'</span>;</div><div class="line"></div><div class="line">foo.init();</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h2><ul>
<li>暂时不要用generators.还没有完美编译到ES5</li>
<li><p>用自带的迭代函数取代 <code>for-in</code> eslint: <a href="http://eslint.org/docs/rules/no-iterator.html" target="_blank" rel="external"><code>no-iterator</code></a> <a href="http://eslint.org/docs/rules/no-restricted-syntax" target="_blank" rel="external"><code>no-restricted-syntax</code></a></p>
<blockquote>
<p>用 <code>map()</code> / <code>every()</code> / <code>filter()</code> / <code>find()</code> / <code>findIndex()</code> / <code>reduce()</code> / <code>some()</code> / … 数组, 用 <code>Object.keys()</code> / <code>Object.values()</code> / <code>Object.entries()</code> 生成数组去处理对象</p>
</blockquote>
</li>
</ul>
<hr>
<p>-<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> numbers) &#123;</div><div class="line">  sum += num;</div><div class="line">&#125;</div><div class="line">sum === <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</div><div class="line">numbers.forEach(<span class="function"><span class="params">num</span> =&gt;</span> sum += num);</div><div class="line">sum === <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="comment">// best (use the functional force)</span></div><div class="line"><span class="keyword">const</span> sum = numbers.reduce(<span class="function">(<span class="params">total, num</span>) =&gt;</span> total + num, <span class="number">0</span>);</div><div class="line">sum === <span class="number">15</span>;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ul>
<li><p>用小数点获取属性. eslint: <a href="http://eslint.org/docs/rules/dot-notation.html" target="_blank" rel="external"><code>dot-notation</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> luke = &#123;</div><div class="line">  <span class="attr">jedi</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">age</span>: <span class="number">28</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> isJedi = luke[<span class="string">'jedi'</span>];</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> isJedi = luke.jedi;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>用 <code>[]</code> 获取动态属性的值</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> luke = &#123;</div><div class="line">  <span class="attr">jedi</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">age</span>: <span class="number">28</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProp</span>(<span class="params">prop</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> luke[prop];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> isJedi = getProp(<span class="string">'jedi'</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li><p>多用<code>const</code>定义变量. eslint: <a href="http://eslint.org/docs/rules/no-undef" target="_blank" rel="external"><code>no-undef</code></a> <a href="http://eslint.org/docs/rules/prefer-const" target="_blank" rel="external"><code>prefer-const</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">superPower = <span class="keyword">new</span> SuperPower();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> superPower = <span class="keyword">new</span> SuperPower();</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>用一个 <code>const</code> 定义一个变量. eslint: <a href="http://eslint.org/docs/rules/one-var.html" target="_blank" rel="external"><code>one-var</code></a> jscs: <a href="http://jscs.info/rule/disallowMultipleVarDecl" target="_blank" rel="external"><code>disallowMultipleVarDecl</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> items = getItems(),</div><div class="line">    goSportsTeam = <span class="literal">true</span>,</div><div class="line">    dragonball = <span class="string">'z'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="comment">// (compare to above, and try to spot the mistake)</span></div><div class="line"><span class="keyword">const</span> items = getItems(),</div><div class="line">    goSportsTeam = <span class="literal">true</span>;</div><div class="line">    dragonball = <span class="string">'z'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> items = getItems();</div><div class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</div><div class="line"><span class="keyword">const</span> dragonball = <span class="string">'z'</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>把 <code>const</code>s 和 <code>let</code>都放在一起,const在前面.</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> i, len, dragonball,</div><div class="line">    items = getItems(),</div><div class="line">    goSportsTeam = <span class="literal">true</span>;</div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> i;</div><div class="line"><span class="keyword">const</span> items = getItems();</div><div class="line"><span class="keyword">let</span> dragonball;</div><div class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</div><div class="line"><span class="keyword">let</span> len;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</div><div class="line"><span class="keyword">const</span> items = getItems();</div><div class="line"><span class="keyword">let</span> dragonball;</div><div class="line"><span class="keyword">let</span> i;</div><div class="line"><span class="keyword">let</span> length;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>不要链式赋值，会搞出全局变量</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// JavaScript interprets this as</span></div><div class="line">  <span class="comment">// let a = ( b = ( c = 1 ) );</span></div><div class="line">  <span class="keyword">let</span> a = b = c = <span class="number">1</span>;</div><div class="line">&#125;());</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 1</span></div><div class="line"><span class="comment">// good</span></div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line">  <span class="keyword">let</span> b = a;</div><div class="line">  <span class="keyword">let</span> c = a;</div><div class="line">&#125;());</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(c); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>不要使用 (++, –)，代码费解，用’+=’之类的取代. eslint <a href="http://eslint.org/docs/rules/no-plusplus" target="_blank" rel="external"><code>no-plusplus</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</div><div class="line">num++;</div><div class="line">--num;</div><div class="line"><span class="comment">// good</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</div><div class="line">num += <span class="number">1</span>;</div><div class="line">num -= <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> sum = array.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>);</div><div class="line"><span class="keyword">const</span> truthyCount = array.filter(<span class="built_in">Boolean</span>).length;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>if里布尔值直接用，数字和字符串要显示写</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (isValid === <span class="literal">true</span>) &#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (isValid) &#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">// bad name is empty string</span></div><div class="line"><span class="keyword">if</span> (name) &#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (name !== <span class="string">''</span>) &#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (collection.length) &#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>不要写复合三元表达式.代码费解，eslint rules: <a href="http://eslint.org/docs/rules/no-nested-ternary.html" target="_blank" rel="external"><code>no-nested-ternary</code></a>.</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> foo = maybe1 &gt; maybe2</div><div class="line">  ? <span class="string">"bar"</span></div><div class="line">  : value1 &gt; value2 ? <span class="string">"baz"</span> : <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="comment">// better</span></div><div class="line"><span class="keyword">const</span> maybeNull = value1 &gt; value2 ? <span class="string">'baz'</span> : <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> foo = maybe1 &gt; maybe2</div><div class="line">  ? <span class="string">'bar'</span></div><div class="line">  : maybeNull;</div><div class="line"></div><div class="line"><span class="comment">// best</span></div><div class="line"><span class="keyword">const</span> maybeNull = value1 &gt; value2 ? <span class="string">'baz'</span> : <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> foo = maybe1 &gt; maybe2 ? <span class="string">'bar'</span> : maybeNull;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>去除不必要的三元表达式 ，eslint rules: <a href="http://eslint.org/docs/rules/no-unneeded-ternary.html" target="_blank" rel="external"><code>no-unneeded-ternary</code></a>.  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> foo = a ? a : b;</div><div class="line"><span class="keyword">const</span> bar = c ? <span class="literal">true</span> : <span class="literal">false</span>;</div><div class="line"><span class="keyword">const</span> baz = c ? <span class="literal">false</span> : <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> foo = a || b;</div><div class="line"><span class="keyword">const</span> bar = !!c;</div><div class="line"><span class="keyword">const</span> baz = !c;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="块"><a href="#块" class="headerlink" title="块"></a>块</h2><hr>
<ul>
<li><p>块代码都需要大括号</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (test)</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (test) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (test) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>else不要换行 . eslint: <a href="http://eslint.org/docs/rules/brace-style.html" target="_blank" rel="external"><code>brace-style</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (test) &#123;</div><div class="line">  thing1();</div><div class="line">  thing2();</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">  thing3();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (test) &#123;</div><div class="line">  thing1();</div><div class="line">  thing2();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  thing3();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul>
<li><p>Use <code>/** ... */</code> for multi-line comments.</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="comment">// @param &#123;String&#125; tag</span></div><div class="line"><span class="comment">// @return &#123;Element&#125; element</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * make() returns a new element</div><div class="line"> * based on the passed-in tag name</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>用<code>//</code>单行注释，在代码前</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;  <span class="comment">// is current tab</span></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">// is current tab</span></div><div class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;</div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</div><div class="line">  <span class="comment">// set the default type to 'no type'</span></div><div class="line">  <span class="keyword">const</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</div><div class="line">  <span class="keyword">return</span> type;</div><div class="line">&#125;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// set the default type to 'no type'</span></div><div class="line">  <span class="keyword">const</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</div><div class="line">  <span class="keyword">return</span> type;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>注释以空格开头. eslint: <a href="http://eslint.org/docs/rules/spaced-comment" target="_blank" rel="external"><code>spaced-comment</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="comment">//is current tab</span></div><div class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">// is current tab</span></div><div class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="空格符"><a href="#空格符" class="headerlink" title="空格符"></a>空格符</h2><ul>
<li>四个空格缩进. eslint: <a href="http://eslint.org/docs/rules/indent.html" target="_blank" rel="external"><code>indent</code></a>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">∙<span class="keyword">const</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</div><div class="line">∙∙∙∙<span class="keyword">const</span> name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>大括号等块级代码前面一个空格 eslint: <a href="http://eslint.org/docs/rules/space-before-blocks.html" target="_blank" rel="external"><code>space-before-blocks</code></a>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// bad</span></div><div class="line">dog.set(<span class="string">'attr'</span>,&#123;</div><div class="line">  <span class="attr">age</span>: <span class="string">'1 year'</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">// good</span></div><div class="line">dog.set(<span class="string">'attr'</span>, &#123;</div><div class="line">  <span class="attr">age</span>: <span class="string">'1 year'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><code>if</code>,<code>while</code>后面加空格，但是<code>function</code>不加 eslint: <a href="http://eslint.org/docs/rules/keyword-spacing.html" target="_blank" rel="external"><code>keyword-spacing</code></a>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span>(isJedi) &#123;</div><div class="line">  fight ();</div><div class="line">&#125;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (isJedi) &#123;</div><div class="line">  fight();</div><div class="line">&#125;</div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log (<span class="string">'Swooosh!'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Swooosh!'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>赋值的=前后要有空格. eslint: <a href="http://eslint.org/docs/rules/space-infix-ops.html" target="_blank" rel="external"><code>space-infix-ops</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> x=y+<span class="number">5</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> x = y + <span class="number">5</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>链式调用换行+缩进. eslint: <a href="http://eslint.org/docs/rules/newline-per-chained-call" target="_blank" rel="external"><code>newline-per-chained-call</code></a> <a href="http://eslint.org/docs/rules/no-whitespace-before-property" target="_blank" rel="external"><code>no-whitespace-before-property</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'#items'</span>).find(<span class="string">'.selected'</span>).highlight().end().find(<span class="string">'.open'</span>).updateCount();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="string">'#items'</span>)</div><div class="line">  .find(<span class="string">'.selected'</span>)</div><div class="line">    .highlight()</div><div class="line">    .end()</div><div class="line">  .find(<span class="string">'.open'</span>)</div><div class="line">    .updateCount();</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>块代码内部不要加空行. eslint: <a href="http://eslint.org/docs/rules/padded-blocks.html" target="_blank" rel="external"><code>padded-blocks</code></a> jscs:  <a href="http://jscs.info/rule/disallowPaddingNewlinesInBlocks" target="_blank" rel="external"><code>disallowPaddingNewlinesInBlocks</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(foo);</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(foo);</div><div class="line">&#125;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (baz) &#123;</div><div class="line">  <span class="built_in">console</span>.log(qux);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(foo);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>每行代码不要超过100个字符 eslint: <a href="http://eslint.org/docs/rules/max-len.html" target="_blank" rel="external"><code>max-len</code></a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> foo = jsonData &amp;&amp; jsonData.foo &amp;&amp; jsonData.foo.bar &amp;&amp; jsonData.foo.bar.baz &amp;&amp; jsonData.foo.bar.baz.quux &amp;&amp; jsonData.foo.bar.baz.quux.xyzzy;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">$.ajax(&#123; <span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">url</span>: <span class="string">'https://airbnb.com/'</span>, <span class="attr">data</span>: &#123; <span class="attr">name</span>: <span class="string">'John'</span> &#125; &#125;).done(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Congratulations!'</span>)).fail(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'You have failed this city.'</span>));</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> foo = jsonData</div><div class="line">  &amp;&amp; jsonData.foo</div><div class="line">  &amp;&amp; jsonData.foo.bar</div></pre></td></tr></table></figure>
<hr>
<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ul>
<li><p>避免一个字符的变量 eslint: <a href="http://eslint.org/docs/rules/id-length" target="_blank" rel="external"><code>id-length</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ..stuff..</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>采用驼峰命名对象，函数. eslint: <a href="http://eslint.org/docs/rules/camelcase.html" target="_blank" rel="external"><code>camelcase</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> OBJEcttsssss = &#123;&#125;;</div><div class="line"><span class="keyword">const</span> this_is_my_object = &#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> thisIsMyObject = &#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">thisIsMyFunction</span>(<span class="params"></span>) </span>&#123;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>常量用大写字母加下划线</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DAY_IN_WEEK = 7</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>用大驼峰命名class eslint: <a href="http://eslint.org/docs/rules/new-cap.html" target="_blank" rel="external"><code>new-cap</code></a></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">// bad</span></div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">     <span class="keyword">this</span>.name = options.name;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// good</span></div><div class="line">   <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">     <span class="keyword">constructor</span>(options) &#123;</div><div class="line">       <span class="keyword">this</span>.name = options.name;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>变量不要用<code>-</code>和<code>_</code>. eslint: <a href="http://eslint.org/docs/rules/no-underscore-dangle.html" target="_blank" rel="external"><code>no-underscore-dangle</code></a></p>
</li>
</ul>
<hr>
<ul>
<li>显式类型转换</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//bad</div><div class="line">const totalScore = this.reviewScore + &apos;&apos;;</div><div class="line">// good</div><div class="line">const totalScore = String(this.reviewScore);</div><div class="line">//bad inputValue=&apos;4&apos;</div><div class="line">const val = +inputValue;</div><div class="line">//good</div><div class="line">const val = Number(inputValue)</div><div class="line">//good</div><div class="line">const hasAge = !!age;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-Style-Guide1-0&quot;&gt;&lt;a href=&quot;#JavaScript-Style-Guide1-0&quot; class=&quot;headerlink&quot; title=&quot;JavaScript Style Guide1.0&quot;&gt;&lt;/a&gt;JavaScript Style Guide1.0&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;继承自airbnb的规范和angular最佳实践&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;TM组前端开发流程&lt;/li&gt;
&lt;li&gt;工具函数库&lt;/li&gt;
&lt;li&gt;ES6&lt;/li&gt;
&lt;li&gt;angular最佳实践&lt;/li&gt;
&lt;li&gt;常用工具函数和代码片段&lt;/li&gt;
&lt;li&gt;js规范&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blook.me/2017/03/02/hello-world/"/>
    <id>http://blook.me/2017/03/02/hello-world/</id>
    <published>2017-03-02T10:10:53.000Z</published>
    <updated>2017-03-02T10:10:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
